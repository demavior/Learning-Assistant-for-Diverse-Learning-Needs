# -*- coding: utf-8 -*-
"""FinetunePrototype.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vI8sEkbaASeVnV0xJZ_IMmnz9ziLAkln
"""

!pip install transformers sentencepiece

from transformers import pipeline

# Load the translation pipeline.
translator = pipeline("translation", model="Helsinki-NLP/opus-mt-mul-en")

def translate_to_english(text):
  """Translates text to English using a pre-trained model.
  """
  try:
    result = translator(text)
    return result[0]['translation_text']
  except Exception as e:
    print(f"An error occurred during translation: {e}")
    return None

# Example usage
input_text = "Bonjour le monde" # Example French text
translated_text = translate_to_english(input_text)

if translated_text:
    print(f"Original text: {input_text}")
    print(f"Translated text: {translated_text}")

!pip install datasets

from transformers import MarianTokenizer, MarianMTModel
model_name = "Helsinki-NLP/opus-mt-mul-en"
tokenizer = MarianTokenizer.from_pretrained(model_name)
model = MarianMTModel.from_pretrained(model_name)
text = "Hello, how are you?"
tokenized = tokenizer(text, return_tensors="pt")
print(tokenized)

from datasets import load_dataset

# Load OPUS Books dataset for English-French translation
dataset = load_dataset("opus_books", "en-fr")

# Inspect the data structure
print(dataset)
print(dataset["train"][0])

def preprocess_function(examples):
    # Extract source and target texts from the 'translation' column
    inputs = [example["en"] for example in examples["translation"]]  # Source language (English)
    targets = [example["fr"] for example in examples["translation"]]  # Target language (French)

    # Tokenize inputs and targets
    model_inputs = tokenizer(inputs, text_target=targets, truncation=True, padding=True)

    # Set labels as target translations (French)
    model_inputs["labels"] = model_inputs["input_ids"].copy()

    return model_inputs

# Apply preprocessing to the entire dataset
tokenized_datasets = dataset.map(
    preprocess_function,
    batched=True,
    remove_columns=["id", "translation"]  # Remove 'id' and 'translation' columns
)

# Inspect a processed sample
print(tokenized_datasets["train"][0])

from transformers import MarianMTModel, Trainer, TrainingArguments
from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)
tokenizer.pad_token = tokenizer.eos_token  # Ensure padding token is set to EOS token, if needed


# Load pre-trained model
model = MarianMTModel.from_pretrained("Helsinki-NLP/opus-mt-en-fr")

# Define training arguments
# Define training arguments
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=5e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    weight_decay=0.01,
    save_steps=10_000,
    save_total_limit=2,
    remove_unused_columns=False,  # Avoid removing columns like 'labels'
    report_to="tensorboard"
)
tokenized_datasets = tokenized_datasets["train"].train_test_split(test_size=0.1)

# Rename splits for clarity
tokenized_datasets = {
    "train": tokenized_datasets["train"],
    "validation": tokenized_datasets["test"]
}

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator
)

# Train the model
trainer.train()

print(tokenized_datasets["train"][0])  # Inspect the first tokenized sample
print(tokenized_datasets["validation"][0])  # Inspect the first tokenized sample from validation